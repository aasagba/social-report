'use strict';

var async = require('async');
var chalk = require('chalk');
var Promise = require('bluebird');
var socialClientHandler = require('../config/socialclient.js');
var socialclient = socialClientHandler();
var ObjectID = require('mongodb').ObjectID;

// User model
module.exports = function (app, callback) {
    app.db.collection('followers', function (err, collection) {
        var model = {

            processFollowers: function (account, accountName, callback) {
                var action = 'followers/ids';
                var acct = account;
                //var result = socialclient.getFollowers(action,accountName);
                socialclient.getFollowers(action,accountName).then(function (followers) {
                console.log("Account: " + JSON.stringify(acct));

                    var account = {
                        account: {
                            id: new ObjectID(acct),
                            followers: []
                        }
                    };

                    // save fields that we want and put in db.
                    followers.forEach( function (follower) {
                        account.account.followers.push({
                            name: follower.name, // foreign key for users collection
                            screen_name: follower.screen_name, // eg. BSI
                            location: follower.location,
                            description: follower.description,
                            //url: follower.display_url
                        });
                    });

                    var results = Promise.all(account.account.followers);

                    results.then(function (data) {
                        console.log("acount to update in db: " + account.account.id);
                        //console.log("obj: " + JSON.stringify(account.account));
                        /*collection.insert(data, function (err, result) {
                            if (err) {
                                return callback(err);
                            }
                            callback(null, result);
                        });*/

                        collection.update(
                            {"account.id": account.account.id},
                            {account: account.account},
                            {upsert: true},
                            function (err, result) {
                                callback(null, result);
                            });

                        //callback(null, data);
                    });


                });
            },

            getFollowers: function (account, callback) {
                var id = new ObjectID(account);

                collection
                    .find({"account.id": id})
                   // .sort({followers_count: -1})
                    .toArray(function (err, results) {
                        if (err) {
                            return callback(err);
                        }
                        callback(null, results);
                    });
            }
        };
        callback(null, model);
    });
}