'use strict';

var async = require('async');
var chalk = require('chalk');
var CronJob = require('cron').CronJob;

module.exports = initTask;
exports.runSocial = runSocial;

// Initialise the task
function initTask (config, app) {
    if (!config.cron) {
        config.cron = '0 6 1 JAN-DEC *'; // 06:00 1st month
    }
    var job = new CronJob(config.cron, run.bind(null, app));
    job.start();
}

// Run the task
function run (app) {
    console.log('');
    console.log(chalk.grey('Starting to run social accounts @ %s'), new Date());

    async.waterfall([

        function (next) {
            // get distinct accounts
            app.model.users.getDistinctAccounts(next);
        },

        // for each client run update
        function (accounts, next) {
            runSocial(accounts, app, next);
        }

    ], function (err) {
       if (err) {
           console.error(chalk.red('Failed to run social accounts: %s'), err.message);
           console.log('');
           process.exit(1);
       }
    });
}

function runSocial (accounts, app, done) {

    var queue = async.queue(function (account, nextInQueue) {
       console.log("Updating client %s", account);

        app.model.users.getAll(account, function (err, users) {
            if (err) {
                console.log('Failed to get accounts for %s', account);
            } else {
                app.model.user.runByClient(users, function (err, results) {
                    if (err) {
                        console.log(chalk.red('Failed to finish job for %s: %s'), account, err.message);
                    } else {
                        console.log(chalk.green('Successfully Ran update for %s accounts'), account);
                    }
                    nextInQueue();
                });
            }
        });
    }, 1);

    queue.drain = function () {
        console.log(chalk.grey('Finished running job @ %s'), new Date());
        done();
    };

    queue.push(accounts);
}